import Header from '@/components/userHome/header';
import SavedVoucherCard from '@/components/userHome/SavedVoucherCard';
import Voucher from '@/models/Voucher';
import { getUserVouchers } from '@/service/UserVoucherAPI';
import AsyncStorage from '@react-native-async-storage/async-storage';
import React, { useEffect, useState, useCallback } from 'react';
import { ScrollView, StyleSheet, Text, View, ActivityIndicator, TouchableOpacity } from 'react-native';

export default function VoucherScreen() {
  const [savedVouchers, setSavedVouchers] = useState<Voucher[]>([]);
  const [appVouchers, setAppVouchers] = useState<Voucher[]>([]);
  const [hotelVouchers, setHotelVouchers] = useState<Voucher[]>([]);
  const [loading, setLoading] = useState(true);
  
  // ‚úÖ NEW STATE: ƒê·ªÉ theo d√µi tab ƒëang ƒë∆∞·ª£c ch·ªçn ('app' cho to√†n h·ªá th·ªëng, 'hotel' cho kh√°ch s·∫°n)
  const [activeTab, setActiveTab] = useState<'app' | 'hotel'>('app'); 

  // H√†m x·ª≠ l√Ω vi·ªác x√≥a voucher
  const handleDeleteVoucher = useCallback((voucherToDelete: Voucher) => {
    console.log(`B·∫Øt ƒë·∫ßu x√≥a voucher: ${voucherToDelete.code}`);

    // 1. L·ªçc ra danh s√°ch m·ªõi kh√¥ng ch·ª©a voucher c·∫ßn x√≥a
    const updatedSavedVouchers = savedVouchers.filter(v => v.code !== voucherToDelete.code);

    // 2. C·∫≠p nh·∫≠t state ch√≠nh
    setSavedVouchers(updatedSavedVouchers);

    // 3. T√°ch l·∫°i 2 lo·∫°i voucher t·ª´ danh s√°ch ƒë√£ c·∫≠p nh·∫≠t
    const appList = updatedSavedVouchers.filter(v => !v.hotelId);
    const hotelList = updatedSavedVouchers.filter(v => v.hotelId);

    // 4. C·∫≠p nh·∫≠t state ph·ª•, khi·∫øn giao di·ªán render l·∫°i
    setAppVouchers(appList);
    setHotelVouchers(hotelList);
    
    // Trong ·ª©ng d·ª•ng th·ª±c t·∫ø, b·∫°n s·∫Ω g·ªçi API ƒë·ªÉ x√≥a voucher kh·ªèi server ·ªü ƒë√¢y.
  }, [savedVouchers]);


  useEffect(() => {
    const fetchData = async () => {
      try {
        const userId = await AsyncStorage.getItem("userId");
        if (!userId) return;

        const userVouchers = await getUserVouchers(Number(userId));
        console.log("User vouchers t·ª´ backend:", userVouchers);

        setSavedVouchers(userVouchers);

        // üéØ T√°ch 2 lo·∫°i voucher
        const appList = userVouchers.filter(v => !v.hotelId);
        const hotelList = userVouchers.filter(v => v.hotelId);
        setAppVouchers(appList);
        setHotelVouchers(hotelList);
      } catch (error) {
        console.error("L·ªói khi t·∫£i voucher:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);
  
  // ‚úÖ L·∫•y danh s√°ch voucher hi·ªÉn th·ªã d·ª±a tr√™n activeTab
  const vouchersToDisplay = activeTab === 'app' ? appVouchers : hotelVouchers;
  const currentVoucherListLength = activeTab === 'app' ? appVouchers.length : hotelVouchers.length;


  if (loading) {
    return (
      <View style={styles.centered}>
        <ActivityIndicator size="large" color="#009EDE" />
        <Text style={{ marginTop: 8 }}>ƒêang t·∫£i voucher...</Text>
      </View>
    );
  }

  return (
    <View style={{ flex: 1, backgroundColor: '#fff' }}>
      <Header />
      <Text style={styles.title}>Voucher ƒë√£ l∆∞u ({savedVouchers.length})</Text>

      {/* NEW UI: Tab Bar */}
      {savedVouchers.length > 0 && (
        <View style={styles.tabBar}>
          <TouchableOpacity 
            style={[styles.tabButton, activeTab === 'app' && styles.activeTab]}
            onPress={() => setActiveTab('app')}
          >
            <Text style={[styles.tabText, activeTab === 'app' && styles.activeTabText]}>
              üéÅ To√†n h·ªá th·ªëng ({appVouchers.length})
            </Text>
          </TouchableOpacity>
          <TouchableOpacity 
            style={[styles.tabButton, activeTab === 'hotel' && styles.activeTab]}
            onPress={() => setActiveTab('hotel')}
          >
            <Text style={[styles.tabText, activeTab === 'hotel' && styles.activeTabText]}>
              üè® Theo kh√°ch s·∫°n ({hotelVouchers.length})
            </Text>
          </TouchableOpacity>
        </View>
      )}

      {savedVouchers.length === 0 ? (
        <Text style={styles.noVoucherText}>
          Ch∆∞a c√≥ voucher n√†o ƒë∆∞·ª£c l∆∞u
        </Text>
      ) : (
        <ScrollView style={styles.scroll}>
          <View style={styles.section}>
            {/* Conditional Content based on Tab */}
            {currentVoucherListLength > 0 ? (
              vouchersToDisplay.map((voucher) => (
                <SavedVoucherCard 
                  key={voucher.code} 
                  voucher={voucher} 
                />
              ))
            ) : (
              <Text style={styles.emptyText}>
                Kh√¥ng c√≥ voucher {activeTab === 'app' ? 'to√†n h·ªá th·ªëng' : 'theo kh√°ch s·∫°n'} n√†o ƒë∆∞·ª£c l∆∞u.
              </Text>
            )}
          </View>
        </ScrollView>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  title: {
    margin: 10,
    fontSize: 16,
    fontWeight: 'bold',
  },
  scroll: {
    paddingHorizontal: 8,
    paddingTop: 10, // Th√™m padding tr√™n ƒë·ªÉ t√°ch tab bar v√† n·ªôi dung
  },
  section: {
    marginBottom: 20,
  },
  sectionTitle: { // ƒê√£ b·ªè s·ª≠ d·ª•ng nh∆∞ng gi·ªØ l·∫°i trong tr∆∞·ªùng h·ª£p c·∫ßn
    fontSize: 15,
    fontWeight: 'bold',
    color: '#333',
    marginVertical: 6,
    marginLeft: 8,
  },
  emptyText: {
    textAlign: 'center',
    color: '#888',
    fontSize: 13,
    marginTop: 20,
    marginHorizontal: 10,
  },
  noVoucherText: {
    marginLeft: 10, 
    color: '#888', 
    marginTop: 10
  },
  centered: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  // ‚úÖ NEW STYLES for Tab Bar
  tabBar: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
    paddingBottom: 5,
    marginHorizontal: 10,
    marginBottom: 5,
  },
  tabButton: {
    flex: 1,
    paddingVertical: 10,
    alignItems: 'center',
    borderBottomWidth: 3,
    borderBottomColor: 'transparent',
  },
  activeTab: {
    borderBottomColor: '#009EDE', // M√†u ch·ªß ƒë·∫°o khi tab active
  },
  tabText: {
    fontSize: 13,
    fontWeight: '500',
    color: '#555',
  },
  activeTabText: {
    color: '#009EDE',
    fontWeight: 'bold',
  }
});
