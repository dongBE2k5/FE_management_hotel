import React, { useEffect, useState } from "react";
import {
  View,
  TouchableOpacity,
  Text,
  StyleSheet,
  ActivityIndicator,
  Dimensions,
  Animated,
} from "react-native";
import { CameraView, useCameraPermissions } from "expo-camera";
import { Ionicons } from "@expo/vector-icons";
import { useScannerCCCD } from "../modal/useScannerCCCD"; // Gi·∫£ s·ª≠ hook ·ªü ƒë√∫ng v·ªã tr√≠
import { useRouter } from "expo-router";
import { Alert } from "react-native";
const { width, height } = Dimensions.get("window");

const FRAME_WIDTH_CCCD = width * 0.9;
const FRAME_HEIGHT_CCCD = FRAME_WIDTH_CCCD * 0.63;
const FRAME_WIDTH_LICENSE = width * 0.9;
const FRAME_HEIGHT_LICENSE = FRAME_WIDTH_LICENSE * 1.414;

export default function CameraCaptureView(props: {
  onClose?: () => void;
  onCaptureDone?: (data: any, side: "front" | "back" | "license") => void;
  cameraRef?: any;
  currentSide?: "front" | "back" | "license";
}) {
  const { onClose, onCaptureDone, cameraRef: cameraRefProp, currentSide: propSide } = props;

  // Hook n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠a ·ªü b∆∞·ªõc tr∆∞·ªõc (kh√¥ng c√≤n callback)
  const {
    cameraRef: cameraRefFromHook,
    loading,
    currentSide,
    handleCapture,
    pickImageFromLibrary,
    setCameraActive,
  } = useScannerCCCD();

  const cameraRef = cameraRefProp || cameraRefFromHook;
  const [scanAnim] = useState(new Animated.Value(0));
  const [torchOn, setTorchOn] = useState(true);
  const [displaySide, setDisplaySide] = useState<"front" | "back" | "license">(propSide || "front");
  const router = useRouter();
  const [permission, requestPermission] = useCameraPermissions();

  useEffect(() => {
    if (!permission?.granted) requestPermission();
  }, [permission]);

  useEffect(() => {
    setCameraActive(true);
    if (propSide) setDisplaySide(propSide);
  }, [propSide]);

  useEffect(() => {
    // Hook 'useScannerCCCD' t·ª± ƒë·ªông ƒë·ªïi 'currentSide' (t·ª´ front -> back)
    // C·∫≠p nh·∫≠t l·∫°i 'displaySide' c·ªßa component n√†y ƒë·ªÉ kh·ªõp
    if (currentSide) setDisplaySide(currentSide);
  }, [currentSide]);

  useEffect(() => {
    const heightToAnimate =
      displaySide === "license" ? FRAME_HEIGHT_LICENSE - 5 : FRAME_HEIGHT_CCCD - 5;

    Animated.loop(
      Animated.sequence([
        Animated.timing(scanAnim, { toValue: heightToAnimate, duration: 2000, useNativeDriver: true }),
        Animated.timing(scanAnim, { toValue: 0, duration: 2000, useNativeDriver: true }),
      ])
    ).start();
  }, [displaySide]);

  const title =
    displaySide === "front"
      ? "M·∫∂T TR∆Ø·ªöC CCCD"
      : displaySide === "back"
        ? "M·∫∂T SAU CCCD"
        : "GI·∫§Y PH√âP KINH DOANH";

  const frameStyle =
    displaySide === "license"
      ? { width: FRAME_WIDTH_LICENSE, height: FRAME_HEIGHT_LICENSE, top: height * 0.1 }
      : { width: FRAME_WIDTH_CCCD, height: FRAME_HEIGHT_CCCD, top: height * 0.25 };

  return (
    <View style={{ flex: 1, backgroundColor: "#000" }}>
      <CameraView
        ref={cameraRef}
        style={{ flex: 1 }}
        facing="back"
        enableTorch={torchOn}
        mode="picture"
      />

      <View style={styles.overlayContainer}>
        <View style={styles.header}>
          {/* ‚ö†Ô∏è S·ª≠a l·∫°i n√∫t Close ·ªü ƒë√¢y, n√≥ b·ªã ƒë√® b·ªüi style 'closeButton' */}
          <TouchableOpacity
            onPress={() => {
              setCameraActive(false);
              if (onClose) onClose();
              else router.back();
            }}
          >
            <Ionicons name="close" size={30} color="#fff" />
          </TouchableOpacity>

          <Text style={styles.headerTitle}>{title}</Text>


          {/* ‚¨áÔ∏è --- S·ª¨A LOGIC ONPRESS C·ª¶A N√öT N√ÄY --- ‚¨áÔ∏è */}
          <TouchableOpacity
            onPress={async () => {
              // 1. G·ªçi h√†m pickImage (d√πng 'displaySide' ƒë·ªÉ bi·∫øt m·∫∑t ƒëang mong ƒë·ª£i)
              const result = await pickImageFromLibrary(displaySide);

              // 2. Logic y h·ªát n√∫t ch·ª•p:
              // N·∫øu 'result' l√† 'null' (do sai m·∫∑t, ho·∫∑c ng∆∞·ªùi d√πng h·ªßy)
              // th√¨ 'useScannerCCCD' ƒë√£ lo Alert, ch√∫ng ta kh√¥ng l√†m g√¨.
              if (result) {
                if (onCaptureDone) {
                  // G·ª≠i d·ªØ li·ªáu v·ªÅ KycFormScreen
                  onCaptureDone(result, displaySide);
                }

                // 3. T·ª± ƒë·ªông ƒë√≥ng modal n·∫øu th√†nh c√¥ng
                if (displaySide === "back" || displaySide === "license") {
                  setCameraActive(false);
                  if (onClose) onClose();
                }
              }
            }}
          >
            <Ionicons name="images-outline" size={26} color="#fff" />
          </TouchableOpacity>
          {/* ‚¨ÜÔ∏è --- K·∫æT TH√öC S·ª¨A --- ‚¨ÜÔ∏è */}
        </View>

        {/* N√∫t close button c≈© b·ªã 'absolute' ·ªü style, n√™n x√≥a n√≥ kh·ªèi ƒë√¢y */}
        {/* <TouchableOpacity style={styles.closeButton} ... /> */}

        <View style={styles.mask} />
        <View style={[styles.frameBox, frameStyle]}>
          <View style={[styles.corner, styles.topLeft]} />
          <View style={[styles.corner, styles.topRight]} />
          <View style={[styles.corner, styles.bottomLeft]} />
          <View style={[styles.corner, styles.bottomRight]} />
          <Animated.View style={[styles.laser, { transform: [{ translateY: scanAnim }] }]} />
        </View>

        <View style={styles.textContainer}>
          <Text style={styles.warningText}>
            ƒê·∫∑t gi·∫•y t·ªù <Text style={{ color: "#00C6FF" }}>TR·ªåN TRONG KHUNG</Text>
          </Text>
          <Text style={styles.subText}>Canh ƒë·ªÅu 4 g√≥c v√† gi·ªØ y√™n tay khi ch·ª•p</Text>
        </View>
      </View>

      <View style={styles.bottomBar}>
        {/* ‚¨áÔ∏è --- PH·∫¶N S·ª¨A L·ªñI LOGIC N·∫∞M ·ªû ƒê√ÇY --- ‚¨áÔ∏è */}
        <TouchableOpacity
          onPress={async () => {
            if (cameraRef && cameraRef.current && !loading) { // Th√™m check !loading
              const photo = await cameraRef.current.takePictureAsync();
              console.warn("üì∏ ·∫¢nh ch·ª•p:", photo.uri);

              // 'result' s·∫Ω l√† 'null' n·∫øu qu√©t th·∫•t b·∫°i (v√≠ d·ª•: sai m·∫∑t)
              const result = await handleCapture(photo.uri, displaySide);

              // üü¢ S·ª¨A L·ªñI: Ch·ªâ ch·∫°y khi 'result' h·ª£p l·ªá (KH√îNG null)
              if (result) {
                if (onCaptureDone) {
                  // 'result' ƒë√£ ch·ª©a 'uri' n√™n ch·ªâ c·∫ßn truy·ªÅn 'result'
                  onCaptureDone(result, displaySide);
                }

                // üü¢ S·ª¨A L·ªñI: Ch·ªâ ƒë√≥ng modal n·∫øu qu√©t 'back' ho·∫∑c 'license' TH√ÄNH C√îNG
                if (displaySide === "back" || displaySide === "license") {
                  setCameraActive(false);
                  if (onClose) onClose();
                }
              }
              // N·∫øu 'result' l√† 'null' (qu√©t sai):
              // - 'useScannerCCCD' ƒë√£ hi·ªÉn th·ªã Alert.
              // - Ch√∫ng ta kh√¥ng l√†m g√¨ c·∫£, modal s·∫Ω gi·ªØ nguy√™n.
              // - 'loading' ƒë√£ ƒë∆∞·ª£c set 'false' (trong finally c·ªßa hook).
              // Ng∆∞·ªùi d√πng c√≥ th·ªÉ b·∫•m ch·ª•p l·∫°i.

            } else if (loading) {
              // Kh√¥ng l√†m g√¨ n·∫øu ƒëang loading
            } else {
              Alert.alert("L·ªói Camera", "Kh√¥ng th·ªÉ ch·ª•p ·∫£nh, vui l√≤ng th·ª≠ l·∫°i.");
            }
          }}
          style={styles.captureButton}
          disabled={loading} // N√∫t ch·ª•p v·∫´n b·ªã v√¥ hi·ªáu h√≥a khi loading
        >
          {loading && <ActivityIndicator size="large" color="#00C6FF" />}
        </TouchableOpacity>
        {/* ‚¨ÜÔ∏è --- K·∫æT TH√öC S·ª¨A L·ªñI LOGIC --- ‚¨ÜÔ∏è */}

        <TouchableOpacity
          onPress={() => setTorchOn((prev) => !prev)}
          style={{ position: "absolute", right: 30, bottom: 30 }}
        >
          <Ionicons name={torchOn ? "flash" : "flash-off"} size={28} color="#fff" />
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  overlayContainer: { ...StyleSheet.absoluteFillObject, alignItems: "center" },
  header: {
    position: "absolute",
    top: 50,
    width: "90%",
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    zIndex: 10,
  },
  headerTitle: { color: "#fff", fontSize: 18, fontWeight: "600" },
  mask: { ...StyleSheet.absoluteFillObject, backgroundColor: "rgba(0,0,0,0.6)" },
  frameBox: {
    position: "absolute",
    borderWidth: 2,
    borderColor: "#00C6FF",
    borderRadius: 12,
    overflow: "hidden",
  },
  corner: { position: "absolute", width: 40, height: 40, borderColor: "#00C6FF" },
  topLeft: { top: -2, left: -2, borderTopWidth: 4, borderLeftWidth: 4 },
  topRight: { top: -2, right: -2, borderTopWidth: 4, borderRightWidth: 4 },
  bottomLeft: { bottom: -2, left: -2, borderBottomWidth: 4, borderLeftWidth: 4 },
  bottomRight: { bottom: -2, right: -2, borderBottomWidth: 4, borderRightWidth: 4 },
  laser: {
    position: "absolute",
    width: "100%",
    height: 3,
    backgroundColor: "#00FF00",
    opacity: 0.7,
  },
  textContainer: {
    position: "absolute",
    bottom: height * 0.15,
    alignItems: "center",
    marginBottom: 80,
  },
  warningText: { color: "#fff", fontWeight: "700", fontSize: 16, marginBottom: 6 },
  subText: { color: "#ccc", fontSize: 14, textAlign: "center", lineHeight: 20 },
  bottomBar: {
    position: "absolute",
    bottom: 40,
    width: "100%",
    alignItems: "center",
    justifyContent: "center",
  },
  captureButton: {
    width: 90,
    height: 90,
    bottom: 20,
    borderRadius: 50,
    backgroundColor: "#fff",
    borderWidth: 6,
    borderColor: "#00C6FF",
    alignItems: "center",
    justifyContent: "center",
  },
  // ‚ö†Ô∏è X√ìA HO·∫∂C S·ª¨A STYLE N√ÄY (n·∫øu b·∫°n mu·ªën gi·ªØ n√≥)
  // Hi·ªán t·∫°i n√≥ ƒëang ƒë√® l√™n n√∫t "Close" trong 'header'
  /* closeButton: {
    position: "absolute",
    top: 50,
    left: 20,
    zIndex: 50,
    backgroundColor: "rgba(0,0,0,0.6)",
    padding: 10,
    borderRadius: 30,
  },
  */
});