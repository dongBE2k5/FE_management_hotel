import { useNavigation, useRoute } from '@react-navigation/native';
import React, { useEffect, useState } from "react";
import {
  ActivityIndicator,
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from "react-native";

// Gi·∫£ ƒë·ªãnh b·∫°n ƒë√£ c√≥ c√°c h√†m API v√† component Modal n√†y
import { getBookingById, getHistoryBookingsByBookingId } from "@/service/BookingAPI";
// import { getServicesByBookingId } from "@/service/ServiceAPI"; // B·ªè comment khi c√≥ API d·ªãch v·ª•
import CostDetailModal from "../model/CostDetailModal";
import StaffListModal from "../model/staffListModal";

// H√ÄM H·ª¢P NH·∫§T D·ªÆ LI·ªÜU CHO M√ÄN H√åNH CH√çNH
const transformDataForScreen = (bookingDetails, historyDetails) => {
  // T√¨m th·ªùi gian check-in th·ª±c t·∫ø t·ª´ l·ªãch s·ª≠
  const checkInRecord = historyDetails.find(item => item.newStatus === 'CHECK_IN');
  const actualCheckInTime = checkInRecord
    ? new Date(checkInRecord.createdAt).toLocaleString('vi-VN')
    : 'Ch∆∞a check-in';

  // L·∫•y th·ªùi gian check-out l√† th·ªùi gian hi·ªán t·∫°i
  const actualCheckOutTime = new Date().toLocaleString('vi-VN');

  // Map tr·∫°ng th√°i thanh to√°n
  let paymentStatusText = 'Ch∆∞a x√°c ƒë·ªãnh';
  switch (bookingDetails.paymentStatus) {
    case 'DA_THANH_TOAN': paymentStatusText = 'ƒê√£ thanh to√°n'; break;
    case 'DA_COC': paymentStatusText = 'ƒê√£ c·ªçc'; break;
    case 'CHUA_THANH_TOAN': paymentStatusText = 'Ch∆∞a thanh to√°n'; break;
  }

  // Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng duy nh·∫•t cho UI ch√≠nh
  return {
    id_booking: bookingDetails.id,
    name: bookingDetails.user?.fullName ?? 'N/A',
    phone: bookingDetails.user?.phone ?? 'N/A',
    cccd: bookingDetails.user?.cccd ?? 'N/A',
    roomType: bookingDetails.room?.type ?? 'N/A',
    roomNumber: bookingDetails.room?.number ?? 'N/A',
    status: paymentStatusText,
    numberOfNights: `${bookingDetails.room?.nights ?? 0} ƒë√™m`,
    numberOfGuests: `${bookingDetails.numberOfGuests ?? 0} ng∆∞·ªùi`,
    totalAmount: `${(bookingDetails.totalPrice ?? 0).toLocaleString('vi-VN')} ‚Ç´`,
    amenities: 'üõÅ T·∫Øm mi·ªÖn ph√≠, buffet bu·ªïi s√°ng', // Gi·ªØ t·∫°m ho·∫∑c l·∫•y t·ª´ API n·∫øu c√≥
    checkInTime: actualCheckInTime,
    checkOutTime: actualCheckOutTime,
  };
};

export default function Checkout() {
  const navigation = useNavigation();
  const route = useRoute();
  const { bookingId } = route.params;

  // State cho d·ªØ li·ªáu, loading v√† l·ªói
  const [bookingData, setBookingData] = useState(null);
  const [costDetailsForModal, setCostDetailsForModal] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  // State cho c√°c modal
  const [costModalVisible, setCostModalVisible] = useState(false);
  const [staffModalVisible, setStaffModalVisible] = useState(false);
  const [currentStep, setCurrentStep] = useState(1);

  // D·ªØ li·ªáu gi·∫£ nh√¢n vi√™n (c√≥ th·ªÉ thay b·∫±ng API sau)
  const staffData = [
    {
      role: "Nh√¢n vi√™n d·ªçn ph√≤ng",
      name: "ƒê·ªó Nguy√™n T√†i",
      status: "ƒêang ki·ªÉm tra ph√≤ng",
      phone: "012354667897",
    },
  ];

  useEffect(() => {
    const fetchData = async () => {
      if (!bookingId) {
        setError("Kh√¥ng c√≥ m√£ ƒë·∫∑t ph√≤ng.");
        setIsLoading(false);
        return;
      }
      try {
        setIsLoading(true);
        // G·ªçi ƒë·ªìng th·ªùi c√°c API c·∫ßn thi·∫øt
        const [bookingDetails, historyDetails] = await Promise.all([
          getBookingById(bookingId),
          getHistoryBookingsByBookingId(bookingId),
          // getServicesByBookingId(bookingId) // B·ªè comment khi c√≥ API
        ]);

        // 1. X·ª≠ l√Ω d·ªØ li·ªáu cho m√†n h√¨nh checkout ch√≠nh
        const formattedScreenData = transformDataForScreen(bookingDetails, historyDetails);
        setBookingData(formattedScreenData);

        // 2. Chu·∫©n b·ªã d·ªØ li·ªáu ri√™ng cho CostDetailModal
        const checkInRecord = historyDetails.find(item => item.newStatus === 'CHECK_IN');
        // console.log(checkInRecord.createdAt);
        console.log(bookingDetails);

        if (checkInRecord && bookingDetails.room?.price) {
          const checkInDate = new Date(checkInRecord.createdAt);
          checkInDate.setHours(12, 0, 0, 0); // Chu·∫©n h√≥a gi·ªù check-in

          const checkOutDate = new Date();
          checkOutDate.setHours(12, 0, 0, 0); // Chu·∫©n h√≥a gi·ªù check-out

          // T√≠nh s·ªë ng√†y, l√†m tr√≤n l√™n
          const diffTime = Math.max(0, checkOutDate - checkInDate);
          const numberOfDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

          const roomTotal = numberOfDays * bookingDetails.room.price;



          const modalData = {
            roomDetails: {
              name: bookingDetails.room.type,
              description: `${numberOfDays} ƒë√™m √ó ${bookingDetails.room.price} ‚Ç´`,
              price: roomTotal,
            },
            // services: servicesUsed.map(...) // B·ªè comment v√† x·ª≠ l√Ω khi c√≥ API
            services: [], // ƒê·ªÉ tr·ªëng theo y√™u c·∫ßu
            bookingId: bookingId, // Truy·ªÅn ID ƒë·ªÉ thanh to√°n
          };
          setCostDetailsForModal(modalData);
        }

      } catch (err) {
        console.error("L·ªói khi t·∫£i d·ªØ li·ªáu check-out:", err);
        setError(err.message || "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.");
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [bookingId]);

  // Giao di·ªán khi ƒëang t·∫£i
  if (isLoading) {
    return (
      <View style={styles.centeredContainer}>
        <ActivityIndicator size="large" color="#1E63E9" />
        <Text style={{ marginTop: 10 }}>ƒêang t·∫£i th√¥ng tin...</Text>
      </View>
    );
  }

  // Giao di·ªán khi c√≥ l·ªói
  if (error) {
    return (
      <View style={styles.centeredContainer}>
        <Text style={{ color: 'red' }}>L·ªói: {error}</Text>
      </View>
    );
  }

  // Giao di·ªán ch√≠nh khi ƒë√£ c√≥ d·ªØ li·ªáu
  return (
    <View style={styles.container}>
      <ScrollView showsVerticalScrollIndicator={false}>
        <View style={styles.header}>
          <Text style={styles.headerTitle}>üìÖ X√°c nh·∫≠n check-out</Text>
          <Text style={styles.subTitle}>X√°c nh·∫≠n kh√°ch h√†ng ƒë√£ Check-out</Text>
          {/* Thanh ti·∫øn tr√¨nh */}
          <View style={styles.progressWrapper}>
            <View style={styles.progressVisualContainer}>
              <View style={[styles.stepCircle, currentStep >= 1 && styles.stepCircleActive]}><Text style={styles.stepTextActive}>1</Text></View>
              <View style={[styles.connector, currentStep > 1 && styles.connectorActive]} />
              <View style={[styles.stepCircle, currentStep >= 2 ? styles.stepCircleActive : styles.stepCircleInactive]}><Text style={currentStep >= 2 ? styles.stepTextActive : styles.stepTextInactive}>2</Text></View>
              <View style={[styles.connector, currentStep > 2 && styles.connectorActive]} />
              <View style={[styles.stepCircle, currentStep >= 3 ? styles.stepCircleActive : styles.stepCircleInactive]}><Text style={currentStep >= 3 ? styles.stepTextActive : styles.stepTextInactive}>3</Text></View>
            </View>
            <View style={styles.progressLabelContainer}>
              <Text style={styles.stepLabel}>X√°c nh·∫≠n</Text>
              <Text style={styles.stepLabel}>Ki·ªÉm tra ph√≤ng</Text>
              <Text style={styles.stepLabel}>Thanh to√°n</Text>
            </View>
          </View>
        </View>

        {bookingData && (
          <View style={styles.card}>
            <View style={styles.rowBetween}>
              <Text style={{ fontWeight: "600" }}>üë§ {bookingData.name}</Text>
              <View style={[styles.badge, { backgroundColor: bookingData.status === "ƒê√£ c·ªçc" ? "orange" : "green" }]} >
                <Text style={{ color: "#fff", fontSize: 12 }}>{bookingData.status}</Text>
              </View>
            </View>
            <Text>üìû {bookingData.phone}</Text>
            <Text>CMND/CCCD: {bookingData.cccd}</Text>
            <View style={styles.divider} />
            <Text style={{ fontWeight: "600" }}>üõèÔ∏è {bookingData.roomType} - Ph√≤ng {bookingData.roomNumber}</Text>
            <View style={styles.rowBetween}>
              <View><Text>Check-in th·ª±c t·∫ø</Text><Text style={styles.bold}>{bookingData.checkInTime}</Text></View>
              <View><Text>Check-out th·ª±c t·∫ø</Text><Text style={styles.bold}>{bookingData.checkOutTime}</Text></View>
            </View>
            <View style={styles.rowBetween}>
              <Text>S·ªë ng√†y d·ª± ki·∫øn: {bookingData.numberOfNights}</Text>
              <Text>S·ªë kh√°ch: {bookingData.numberOfGuests}</Text>
            </View>
            <View style={styles.rowBetween}>
              <Text style={{ fontWeight: "600" }}>T·ªïng ti·ªÅn</Text>
              <Text style={[styles.bold, { fontSize: 16 }]}>{bookingData.totalAmount}</Text>
            </View>
            <Text style={{ marginTop: 8 }}>{bookingData.amenities}</Text>
          </View>
        )}

        <TouchableOpacity style={[styles.btn, { backgroundColor: "green" }]} onPress={() => setStaffModalVisible(true)}>
          <Text style={styles.btnText}>G·ªçi nh√¢n vi√™n ki·ªÉm tra ph√≤ng</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.btn, { backgroundColor: "#1E63E9" }]}
          // B·ªé ƒêI·ªÄU KI·ªÜN IF, LU√îN CHO PH√âP M·ªû MODAL
          onPress={() => setCostModalVisible(true)}
        >
          <Text style={styles.btnText}>Xem chi ti·∫øt d·ªãch v·ª• & thanh to√°n</Text>
        </TouchableOpacity>

        <TouchableOpacity style={[styles.btn, { backgroundColor: "#ccc" }]} onPress={() => navigation.goBack()}>
          <Text style={{ fontWeight: "600", color: "#000" }}>Quay l·∫°i</Text>
        </TouchableOpacity>
      </ScrollView>

      <StaffListModal
        visible={staffModalVisible}
        staffList={staffData}
        onClose={() => setStaffModalVisible(false)}
      />

      <CostDetailModal
        visible={costModalVisible}
        onClose={() => setCostModalVisible(false)}
        costData={costDetailsForModal}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  centeredContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: "#fff",
  },
  container: {
    flex: 1,
    backgroundColor: "#fff",
    padding: 16,
  },
  header: {
    marginBottom: 24,
  },
  headerTitle: {
    fontSize: 22,
    fontWeight: "bold",
    textAlign: 'center',
  },
  subTitle: {
    color: "#666",
    marginBottom: 24,
    textAlign: 'center',
    fontSize: 14,
  },
  progressWrapper: {},
  progressVisualContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 25,
  },
  progressLabelContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 8,
  },
  stepCircle: {
    width: 32,
    height: 32,
    borderRadius: 16,
    justifyContent: 'center',
    alignItems: 'center',
  },
  stepCircleActive: {
    backgroundColor: '#1E63E9',
  },
  stepCircleInactive: {
    backgroundColor: '#D9D9D9',
  },
  stepTextActive: {
    color: '#FFFFFF',
    fontWeight: 'bold',
  },
  stepTextInactive: {
    color: '#333333',
    fontWeight: 'bold',
  },
  stepLabel: {
    flex: 1,
    fontSize: 12,
    textAlign: 'center',
    color: '#666',
  },
  connector: {
    flex: 1,
    height: 2,
    backgroundColor: '#D9D9D9',
    marginHorizontal: 10,
  },
  connectorActive: {
    backgroundColor: '#1E63E9',
  },
  card: {
    borderWidth: 1,
    borderColor: "#ddd",
    borderRadius: 8,
    padding: 12,
    marginBottom: 16,
  },
  rowBetween: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 6,
  },
  bold: {
    fontWeight: "600",
  },
  badge: {
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 6,
  },
  divider: {
    height: 1,
    backgroundColor: "#ddd",
    marginVertical: 8,
  },
  btn: {
    padding: 12,
    borderRadius: 8,
    alignItems: "center",
    marginBottom: 10,
  },
  btnText: {
    color: "#fff",
    fontWeight: "600",
  },
});