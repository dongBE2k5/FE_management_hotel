import RegisterResponse from '@/models/RegisterResponse';
import { getUserById } from '@/service/UserAPI';
import type { RootStackParamList } from '@/types/navigation';
import Ionicons from '@expo/vector-icons/Ionicons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import DateTimePicker from '@react-native-community/datetimepicker';
import type { RouteProp } from '@react-navigation/native';
import { useNavigation, useRoute } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';
import { format } from 'date-fns';
import { vi } from 'date-fns/locale';
import { useRouter } from 'expo-router';
import React, { useEffect, useState } from 'react';
import { Button, Image, Modal, Platform, StyleSheet, TouchableOpacity, View } from 'react-native';
import { Text } from 'react-native-paper';
import SpecialRequest from './SpecialRequest';
type FormBookingScreenNavigationProp = StackNavigationProp<
  RootStackParamList,
  "FormBooking"
>;

export default function FormBooking() {
    const [checkIn, setCheckIn] = useState<Date>(new Date());      // m·∫∑c ƒë·ªãnh h√¥m nay
    const [checkOut, setCheckOut] = useState<Date | null>(null);   // ch∆∞a ch·ªçn
    const [showIn, setShowIn] = useState(false);
    const [showOut, setShowOut] = useState(false);
    const [specialRequests, setSpecialRequests] = useState<string[]>([]);
    const route = useRoute<RouteProp<RootStackParamList, 'FormBooking'>>();
    const { room, checkInDate, checkOutDate } = route.params;
    const [user, setUser] = useState<RegisterResponse | null>(null);
    const [price, setPrice] = useState<number>(0);
    const router = useRouter();
    const navigation = useNavigation<FormBookingScreenNavigationProp>();

    useEffect(() => {
        const getUser = async () => {
            const userId = await AsyncStorage.getItem('userId');
            if (userId) {
                const res = await getUserById(userId!);
                console.log(res);

                setUser(res);
            } else {
                console.log("Kh√¥ng t√¨m th·∫•y userId");
                router.replace('/(tabs)/profile');
            }
        };

        getUser();
        setPrice(Number(room.price) * nights);

    }, []);
    // type FormBookingNavProp = NativeStackNavigationProp<RootStackParamList, 'FormBooking'>;
    // const navigation = useNavigation<FormBookingNavProp>();
    console.log(room);

    // const hotelName = 'Kh√°ch s·∫°n M∆∞·ªùng Thanh Grand ƒê√† N·∫µng';
    const roomName = 'Superior Twin Room - Room with Breakfast';
    const hotelImage = require('../../assets/images/ks1.jpg');

    const specialRequestPrice = 30000;
    const specialRequestTotal = specialRequestPrice * specialRequests.length;


    // Thu·∫ø & ph√≠, b·∫£o hi·ªÉm
    const [insuranceSelected, setInsuranceSelected] = useState(false);
    const taxFee = 124182;
    const insurancePrice = 43500;

    const nights =
        checkOutDate
            ? Math.max(
                1,
                Math.round(
                    (checkOutDate!.getTime() - checkInDate.getTime()) / (1000 * 60 * 60 * 24)
                )
            )
            : 0;
    const totalPrice =
        checkOutDate
            ? (Number(room.price) * nights) + taxFee + specialRequestTotal + (insuranceSelected ? insurancePrice : 0)
            : 0;

    const options = [
        'Ph√≤ng t·∫ßng cao',
        'Kh√¥ng h√∫t thu·ªëc',
        'C√≥ n√¥i cho tr·∫ª em',
        'Check-in s·ªõm',
        'View bi·ªÉn/ th√†nh ph·ªë',
    ];



    const formatVN = (date: Date) =>
        format(date, "EEE, d 'thg' M yyyy", { locale: vi });

    return (
        <View>

            <View style={styles.container}>
                <Text style={{ fontWeight: 'bold', marginBottom: 5 }}>{room.hotelName}</Text>
                {/* Ng√†y nh·∫≠n ph√≤ng + s·ªë ƒë√™m */}
                <View style={styles.row}>
                    <TouchableOpacity style={styles.leftBox}>
                        <Text style={styles.label}>Ng√†y nh·∫≠n ph√≤ng</Text>
                        <Text style={styles.value}>{formatVN(checkInDate)}</Text>
                    </TouchableOpacity>

                    <View style={styles.rightBox}>
                        <Text style={styles.label}>S·ªë ƒë√™m ngh·ªâ</Text>
                        <Text style={[styles.value, { fontWeight: 'bold' }]}>
                            {checkOutDate ? `${nights} ƒë√™m` : '--'}
                        </Text>
                    </View>
                </View>

                {/* Ng√†y tr·∫£ ph√≤ng */}
                <TouchableOpacity
                    style={styles.bottomBox}
                >
                    <Text style={styles.label}>Tr·∫£ ph√≤ng</Text>
                    <Text style={styles.value}>{formatVN(checkOutDate!)}</Text>

                </TouchableOpacity>

                {/* Date Pickers */}
                {/* ----- Date Pickers ----- */}
                {/* Nh·∫≠n ph√≤ng */}
                <Modal
                    transparent
                    animationType="slide"
                    visible={showIn && Platform.OS === 'ios'}
                    onRequestClose={() => setShowIn(false)}
                >
                    <View style={{ flex: 1, justifyContent: 'flex-end', backgroundColor: '#00000066' }}>
                        <View style={{
                            backgroundColor: '#fff',   // tr·∫Øng r√µ r√†ng
                            height: 260,
                            borderTopLeftRadius: 12,
                            borderTopRightRadius: 12,
                            justifyContent: 'center'
                        }}>
                            <DateTimePicker
                                value={checkIn || new Date()}       // üëà lu√¥n m·∫∑c ƒë·ªãnh ng√†y h√¥m nay
                                minimumDate={new Date()}
                                mode="date"
                                display="spinner"
                                themeVariant="light" // √©p s√°ng
                                textColor="black"    // m√†u ch·ªØ c·ªßa spinner (iOS 14+)
                                onChange={(_, date) => date && setCheckIn(date)}
                                style={{ flex: 1 }}
                            />
                            <View style={{ flexDirection: 'row', justifyContent: 'flex-end', paddingRight: 12 }}>
                                <Button title="Ch·ªçn" onPress={() => setShowIn(false)} />

                            </View>
                        </View>
                    </View>
                </Modal>

                {/* Android gi·ªØ nguy√™n */}
                {Platform.OS === 'android' && showIn && (
                    <DateTimePicker
                        value={checkIn}
                        mode="date"
                        display="default"
                        minimumDate={new Date()} // üëà Ch·∫∑n ng√†y qu√° kh·ª©
                        onChange={(_, date) => {
                            setShowIn(false);
                            if (date) {
                                setCheckIn(date);
                                if (checkOut && date >= checkOut) setCheckOut(null);
                            }
                        }}
                    />
                )}


                {/* ----- Tr·∫£ ph√≤ng ----- */}
                <Modal
                    transparent
                    animationType="slide"
                    visible={showOut && Platform.OS === 'ios'}
                    onRequestClose={() => setShowOut(false)}
                >
                    <View style={{ flex: 1, justifyContent: 'flex-end', backgroundColor: '#00000066' }}>
                        <View style={{
                            backgroundColor: '#fff',   // tr·∫Øng r√µ r√†ng
                            height: 260,
                            borderTopLeftRadius: 12,
                            borderTopRightRadius: 12,
                            justifyContent: 'center'
                        }}>
                            <DateTimePicker
                                value={checkOut || new Date()}       // üëà lu√¥n m·∫∑c ƒë·ªãnh ng√†y h√¥m nay
                                minimumDate={new Date()}
                                mode="date"
                                display="spinner"
                                themeVariant="light" // √©p s√°ng
                                textColor="black"    // m√†u ch·ªØ c·ªßa spinner (iOS 14+)
                                style={{ flex: 1 }}
                                onChange={(_, date) => date && setCheckOut(date)}
                            />
                            <View style={{ flexDirection: 'row', justifyContent: 'flex-end', padding: 12 }}>
                                <Button title="Ch·ªçn" onPress={() => setShowOut(false)} />

                            </View>
                        </View>
                    </View>
                </Modal>

                {Platform.OS === 'android' && showOut && (
                    <DateTimePicker
                        value={checkOut || new Date(checkIn.getTime() + 86400000)}
                        minimumDate={new Date(checkIn.getTime() + 86400000)}
                        mode="date"
                        display="default"
                        onChange={(_, date) => {
                            setShowOut(false);
                            if (date) setCheckOut(date);
                        }}
                    />
                )}


                <Text style={{ fontWeight: 'bold', marginBottom: 5, marginTop: 10 }}>{room.description}</Text>
                <View style={{ flexDirection: 'row' }}>
                    <Text style={{ color: '#999494', fontSize: 11 }}>Kh√°ch</Text>
                    <Text style={{ color: '#999494', fontSize: 11, left: 68 }}>{room.typeRoom == "DON" ? "1 ng∆∞·ªùi" : room.typeRoom == "DOI" ? "2 ng∆∞·ªùi" : "4 tr·ªü l√™n"} /Ph√≤ng</Text>
                </View>
                <View style={{ flexDirection: 'row', marginTop: 5 }}>
                    <Text style={{ color: '#999494', fontSize: 11 }}>Lo·∫°i gi∆∞·ªùng</Text>
                    <Text style={{ color: '#999494', fontSize: 11, left: 40 }}>2 gi∆∞·ªùng ƒë∆°n</Text>

                </View>

                <View style={{ flexDirection: 'row' }}>
                    <Image style={{ width: 70, height: 50, borderRadius: 5, marginTop: 5 }} source={require("../../assets/images/room1.jpg")} />
                    <View>
                        <Text style={{ color: '#999494', fontSize: 11, left: 28, marginTop: 5 }}>G·ªìm b·ªØa s√°ng</Text>
                        <Text style={{ color: '#999494', fontSize: 11, left: 28, marginTop: 5 }}>Wifi mi·ªÖn ph√≠</Text>
                    </View>
                </View>
            </View>

            <View style={styles.container}>
                <Text style={{ fontWeight: 'bold', }}>Ch√≠nh S√°ch l∆∞u tr√∫</Text>
                <Text style={{ fontWeight: 'bold', fontSize: 11, marginLeft: 15, marginTop: 10, color: '' }}>Gi·∫•y t·ªù b·∫Øt bu·ªôc</Text>
                <Text style={{ fontWeight: 'bold', fontSize: 11, marginLeft: 15, marginTop: 10, color: '#999494' }}>Khi nh·∫≠n ph√≤ng, b·∫°n c·∫ßn cung c·∫•p CMND/CCCD, other. C√°c gi·∫•y t·ªù c·∫ßn thi·∫øt c√≥ th·ªÉ ·ªü d·∫°ng b·∫£n m·ªÅm</Text>
            </View>
            <View style={styles.container}>
                <Text style={{ fontWeight: 'bold', }}>Th√¥ng tin li√™n h·ªá (nh·∫≠n v√©/ phi·∫øu thanh to√°n)</Text>
                <View style={{
        
                    borderBottomWidth: StyleSheet.hairlineWidth,
                    borderBottomColor: '#ccc',
                    paddingBottom: 4,
                    marginHorizontal: 15,
                    marginTop: 10
                }}>
                    <View style={{
                        flexDirection: 'row',
                    }}>
                        <Text style={{ fontWeight: 'bold', fontSize: 10, marginRight: 10 }}>
                            {user?.data?.fullName}
                        </Text>
                        <Text style={{ fontWeight: 'bold', fontSize: 10, marginRight: 10 }}>
                            {user?.data?.email}
                        </Text>

                    </View >
                    <View style={{
                        flexDirection: 'row',     marginTop: 10
                    }}>
                        <Text style={{ fontWeight: 'bold', fontSize: 10, marginRight: 10 }}>
                            {user?.data?.phone}
                        </Text>
                        <Ionicons name="checkmark" size={15} color="green" />
                    </View>
                </View>
                <View>
                    <Text style={{ fontWeight: 'bold', marginTop: 10 }}>Y√™u c·∫ßu ƒë·∫∑c bi·ªát</Text>
                    <SpecialRequest onChange={setSpecialRequests} />
                </View>


                {/* Ti·ªán √≠ch cho chuy·∫øn ƒëi */}
                <Text style={{ fontWeight: 'bold', marginBottom: 10 }}>
                    Ti·ªán √≠ch cho chuy·∫øn ƒëi
                </Text>
                <TouchableOpacity
                    style={styles.insuranceBox}
                    activeOpacity={0.8}
                    onPress={() => setInsuranceSelected(!insuranceSelected)}
                >
                    <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                        <Ionicons
                            name="shield-checkmark"
                            size={20}
                            color="#007AFF"
                            style={{ marginRight: 6 }}
                        />
                        <Text style={{ fontWeight: 'bold', fontSize: 13, flexShrink: 1 }}>
                            B·∫£o hi·ªÉm Du l·ªãch Chubb ‚Äì Hotel Protect
                        </Text>
                    </View>

                    <Text style={styles.insuranceText}>
                        B·∫£o v·ªá k·ª≥ ngh·ªâ c·ªßa Qu√Ω kh√°ch kh·ªèi r·ªßi ro b·ªã h·ªßy, m·∫•t ƒë·∫∑t ph√≤ng kh√°ch s·∫°n,
                        v√† h∆°n th·∫ø n·ªØa.
                    </Text>

                    <View style={{ marginTop: 6 }}>
                        <Text style={styles.insuranceItem}>‚Ä¢ M·∫•t ho·∫∑c h∆∞ h·∫°i ƒë·ªì v·ªõi h√†nh l√Ω, qu·∫ßn √°o v√† v·∫≠t d·ª•ng c√° nh√¢n: Chi tr·∫£ l√™n ƒë·∫øn VND 20,000,000 (gi·ªõi h·∫°n VND 3,000,000 cho m·ªói m√≥n ƒë·ªì).</Text>
                        <Text style={styles.insuranceItem}>‚Ä¢ M·∫•t ƒë·∫∑t ph√≤ng kh√°ch s·∫°n: Chi tr·∫£ l√™n ƒë·∫øn VND 850,000/ ph√≤ng/ ƒë√™m.</Text>
                        <Text style={styles.insuranceItem}>‚Ä¢ H·ªßy hay Gi√°n ƒëo·∫°n ƒë·∫∑t ph√≤ng: Chi tr·∫£ l√™n ƒë·∫øn VND 850,000/ ph√≤ng/ ƒë√™m.</Text>
                        <Text style={styles.insuranceItem}>‚Ä¢ T√†i s·∫£n c√° nh√¢n: Chi tr·∫£ l√™n ƒë·∫øn VND 210,000,000.</Text>
                    </View>

                    <View style={styles.priceRow}>
                        <Text style={{ color: '#e53935', fontWeight: 'bold' }}>VND 43.500</Text>
                        <Ionicons
                            name={insuranceSelected ? 'checkbox' : 'square-outline'}
                            size={22}
                            color={insuranceSelected ? '#007AFF' : '#aaa'}
                        />
                    </View>
                </TouchableOpacity>
                {/* Chi ti·∫øt ph√≠ thanh to√°n */}
                <View style={styles.insuranceBox}>
                    <Text style={{ fontWeight: 'bold', marginBottom: 6 }}>
                        Chi ti·∫øt ph√≠ thanh to√°n
                    </Text>

                    <Text style={styles.note}>
                        Thu·∫ø v√† ph√≠ l√† c√°c kho·∫£n ƒë∆∞·ª£c Traveloka chuy·ªÉn tr·∫£ cho kh√°ch s·∫°n. M·ªçi th·∫Øc m·∫Øc v·ªÅ thu·∫ø v√† h√≥a ƒë∆°n vui l√≤ng tham kh·∫£o
                        ƒêi·ªÅu Kho·∫£n v√† ƒêi·ªÅu Ki·ªán c·ªßa TravelokaTDC ƒë·ªÉ ƒë∆∞·ª£c gi·∫£i ƒë√°p
                    </Text>

                    {checkOut && nights > 0 && (
                        <>
                            <View style={styles.itemRow}>
                                <Text style={styles.itemName}>
                                    (1√ó) Deluxe Single Beds x {nights} ƒë√™m
                                </Text>
                                <Text style={styles.itemValue}>
                                    {(Number(room.price) * nights).toLocaleString('vi-VN')} VND
                                </Text>
                            </View>

                            <View style={styles.itemRow}>
                                <Text style={styles.itemName}>Thu·∫ø v√† ph√≠</Text>
                                <Text style={styles.itemValue}>
                                    {taxFee.toLocaleString('vi-VN')} VND
                                </Text>
                            </View>
                        </>
                    )}

                    {specialRequests.length > 0 && (

                        <View style={styles.itemRow}>
                            <Text style={styles.itemName}>Ph√≠ y√™u c·∫ßu </Text>
                            <Text style={styles.itemValue}>{specialRequestTotal.toLocaleString('vi-VN')} VND</Text>
                        </View>
                    )}
                    {insuranceSelected && (
                        <View style={styles.itemRow}>
                            <Text style={styles.itemName}>B·∫£o hi·ªÉm Du l·ªãch</Text>
                            <Text style={styles.itemValue}>
                                {insurancePrice.toLocaleString('vi-VN')} VND
                            </Text>
                        </View>
                    )}
                    <Text style={styles.totalPrice}>
                        T·ªïng: {price.toLocaleString('vi-VN')} VND
                    </Text>
                    <TouchableOpacity
                        style={[
                            {
                                backgroundColor: '#1E90FF', // x√°m n·∫øu ch∆∞a ch·ªçn
                                paddingVertical: 12,
                                borderRadius: 8,
                                alignItems: 'center',
                                marginTop: 10,
                            },
                        ]}
                        activeOpacity={0.8}
                        onPress={() => {
                            navigation.navigate('ReviewBooking', {
                                room,
                                checkInDate,
                                checkOutDate,
                                nights,
                            });
                        }}
                    >
                        <Text style={{ color: '#fff', fontSize: 16, fontWeight: '600' }}>
                            Ti·∫øp t·ª•c
                        </Text>
                    </TouchableOpacity>

                </View>


            </View>
        </View>

    );
}

const styles = StyleSheet.create({
    container: {
        borderRadius: 10,
        margin: 10,
        marginTop: 0,
        paddingHorizontal: 16,
        paddingVertical: 12,
        backgroundColor: '#fff',
        // iOS
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.2,
        shadowRadius: 4,
        // Android
        elevation: 4,
    },
    row: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        borderBottomWidth: StyleSheet.hairlineWidth,
        borderColor: '#ddd',
    },
    leftBox: {
        flex: 1,
        marginRight: 10,
    },
    rightBox: {
        width: 100,
        alignItems: 'flex-end',
    },
    bottomBox: {
        borderBottomWidth: StyleSheet.hairlineWidth,
        borderColor: '#ddd',
        marginTop: 12,
    },
    label: {
        fontSize: 11,
        color: '#666',
        marginBottom: 4,
    },
    value: {
        fontSize: 12,
        color: '#000',
    },
    insuranceBox: {
        borderWidth: StyleSheet.hairlineWidth,
        borderColor: '#ccc',
        borderRadius: 10,
        padding: 12,
        backgroundColor: '#fff',
        marginTop: 10
    },
    insuranceText: {
        marginTop: 6,
        fontSize: 12,
        color: '#555',
    },
    insuranceItem: {
        fontSize: 12,
        color: '#555',
        marginTop: 4,
    },
    priceRow: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginTop: 10,
        borderTopWidth: StyleSheet.hairlineWidth,
        borderBottomWidth: StyleSheet.hairlineWidth,
        borderColor: '#ddd',
        paddingVertical: 8,
        marginBottom: 6,
    },
    note: {
        fontSize: 11,
        color: '#555',
        marginBottom: 8,
    },
    totalLabel: { fontWeight: 'bold' },
    totalPrice: { fontWeight: 'bold', color: '#000' },
    itemRow: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        marginBottom: 4,
    },
    itemName: { fontSize: 12, color: '#444' },
    itemValue: { fontSize: 12, color: '#444' },
    btnContinue: {

        borderRadius: 6,
        alignItems: 'center',
        paddingVertical: 10,
        marginTop: 10,
    },

});


